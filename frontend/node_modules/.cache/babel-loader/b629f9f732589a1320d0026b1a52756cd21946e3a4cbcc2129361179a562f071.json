{"ast":null,"code":"export const onDrop = (game, setFen, setMoves, sourceSquare, targetSquare) => {\n  try {\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q'\n    });\n    if (move) {\n      const moveString = move.from + move.to + (move.promotion ? move.promotion : '');\n      setFen(game.fen());\n      setMoves(prev => [...prev, moveString]);\n      return true;\n    }\n    return false;\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n};\nexport const isGameOver = game => {\n  if (game.isGameOver()) {\n    if (game.isCheckmate()) {\n      return game.turn() === 'b' ? 'white_wins' : 'black_wins';\n    } else if (game.isStalemate() || game.isDraw() || game.isThreefoldRepetition() || game.isInsufficientMaterial()) {\n      return 'draw';\n    }\n  }\n  return null;\n};\nexport const resetBoard = (gameRef, setFen) => {};","map":{"version":3,"names":["onDrop","game","setFen","setMoves","sourceSquare","targetSquare","move","from","to","promotion","moveString","fen","prev","e","console","log","isGameOver","isCheckmate","turn","isStalemate","isDraw","isThreefoldRepetition","isInsufficientMaterial","resetBoard","gameRef"],"sources":["/home/fischer/IT/projects/chess-rl/frontend/chess-rl-frontend/src/services/chessService.ts"],"sourcesContent":["import { Chess } from 'chess.js';\nimport React from 'react';\n\n\nexport const onDrop = (\n    game: Chess,\n    setFen: (fen: string) => void,\n    setMoves: React.Dispatch<React.SetStateAction<string[]>>,\n    sourceSquare: string,\n    targetSquare: string,\n): boolean => {\n    try {\n        const move = game.move({\n            from: sourceSquare,\n            to: targetSquare,\n            promotion: 'q',\n        });\n\n        if (move) {\n            const moveString: string = move.from + move.to + (move.promotion ? move.promotion : '');\n\n            setFen(game.fen());\n            setMoves((prev: string[]) => [...prev, moveString]);\n\n            return true;\n        }\n\n        return false;\n    } catch(e) {\n        console.log(e);\n        return false;\n    }\n};\n\nexport const isGameOver = (game: Chess): string | null  => {\n    if (game.isGameOver()) {\n        if (game.isCheckmate()) {\n            return game.turn() === 'b' ? 'white_wins' : 'black_wins';\n        } else if (game.isStalemate() || game.isDraw() || game.isThreefoldRepetition() || game.isInsufficientMaterial()) {\n            return 'draw';\n        }\n    }\n\n    return null;\n};\n\n\nexport const resetBoard = (gameRef, setFen ) => {\n\n};\n"],"mappings":"AAIA,OAAO,MAAMA,MAAM,GAAGA,CAClBC,IAAW,EACXC,MAA6B,EAC7BC,QAAwD,EACxDC,YAAoB,EACpBC,YAAoB,KACV;EACV,IAAI;IACA,MAAMC,IAAI,GAAGL,IAAI,CAACK,IAAI,CAAC;MACnBC,IAAI,EAAEH,YAAY;MAClBI,EAAE,EAAEH,YAAY;MAChBI,SAAS,EAAE;IACf,CAAC,CAAC;IAEF,IAAIH,IAAI,EAAE;MACN,MAAMI,UAAkB,GAAGJ,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACE,EAAE,IAAIF,IAAI,CAACG,SAAS,GAAGH,IAAI,CAACG,SAAS,GAAG,EAAE,CAAC;MAEvFP,MAAM,CAACD,IAAI,CAACU,GAAG,CAAC,CAAC,CAAC;MAClBR,QAAQ,CAAES,IAAc,IAAK,CAAC,GAAGA,IAAI,EAAEF,UAAU,CAAC,CAAC;MAEnD,OAAO,IAAI;IACf;IAEA,OAAO,KAAK;EAChB,CAAC,CAAC,OAAMG,CAAC,EAAE;IACPC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IACd,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,OAAO,MAAMG,UAAU,GAAIf,IAAW,IAAqB;EACvD,IAAIA,IAAI,CAACe,UAAU,CAAC,CAAC,EAAE;IACnB,IAAIf,IAAI,CAACgB,WAAW,CAAC,CAAC,EAAE;MACpB,OAAOhB,IAAI,CAACiB,IAAI,CAAC,CAAC,KAAK,GAAG,GAAG,YAAY,GAAG,YAAY;IAC5D,CAAC,MAAM,IAAIjB,IAAI,CAACkB,WAAW,CAAC,CAAC,IAAIlB,IAAI,CAACmB,MAAM,CAAC,CAAC,IAAInB,IAAI,CAACoB,qBAAqB,CAAC,CAAC,IAAIpB,IAAI,CAACqB,sBAAsB,CAAC,CAAC,EAAE;MAC7G,OAAO,MAAM;IACjB;EACJ;EAEA,OAAO,IAAI;AACf,CAAC;AAGD,OAAO,MAAMC,UAAU,GAAGA,CAACC,OAAO,EAAEtB,MAAM,KAAM,CAEhD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}